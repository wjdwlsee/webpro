1. 컨트롤러  :최초 클라이언트로부터 요청이 들어왔을 때, (DispatcherServlet이 매핑이 되어 있으므로, DispatcherServlet이 받고 HandlerMapping과 HandlerAdapter를 통해) 컨트롤러로 진입하게 되고, 
컨트롤러는 요청에 대한 작업을 한 후 (ViewResolver를 통해 뷰를 찾아) 뷰 쪽으로 데이터를 전달한다. 그러면 뷰로 인해 화면에 응답을 하는 구조로 되어 있다.
(1) @Controller 어노테이션을 클래스에 적용한다(컨트롤러 역할의 클래스 파일은 servlet-context.xml에 <context:component-scan base-package="com.lec.ch07" /> 명시된 패키지 아래에만 위치할 수 있다)
(2) @requestMapping 어노테이션을 이용해서 요청 경로를 지정한다
(3) 웹브라우저의 요청을 처리할 메서드를 구현한다
(4) 뷰이름을 리턴한다
2. 요청 처리 메소드 제작.
(1) 클라이언트의 요청을 처리할 메소드를 제작한다
(2) 뷰페이지 이름 생성(조합) 방법
servlet-context.xml의 아래의 소스에 의해 조합된다. (뷰페이지 이름 = prefix + 요청처리 메소드 반환값 +suffix)
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
3. 뷰에 데이터 전달 : 컨트롤러에서 로직 수행 후 뷰페이지를 반환하고, 이 때 뷰에서 사용하게 될 데이터를 객체로 전달할 수 있다. 
Model 클래스를 이용한 데이터 전달 ; @RequestMapping어노테이션이 붙은 메소드는 Model형 객체를 매개변수로 받을 수 있다. 
 Model 객체를 파라미터로 받음 ex. Public String content(Model model){  ->  Model 객체에 데이터를 담음   ex. model.addAttribute(“id”,”aa”); -> 컨트롤러에서 전달받은 Model 객체의 속성을 이용함 ex. ${id}
4. ModelAndView 클래스를 이용한 데이터 전달 ; 매개변수로 데이터를 안 받고 매소드 안에서 직접 생성한다.
 ModelAndView 객체생성 ex. ModelAndView mv = new ModelAndView(); ->  Model 객체에 데이터를 담음 ex. mv.addObject(“id”,30); ->  뷰이름 설정 ex.mv.setViewName(“board/reply”); -> 컨트롤러에서 전달받은 객체의 속성을 이용함  ex. ${id}