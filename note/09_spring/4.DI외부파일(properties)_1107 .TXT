[ 05 ] 외부파일(*.properties)을 이용한 설정 (webproject로 생성 –Environment 때문에)
소스코드를 수정하지 않고 파일의 데이터만 변경하여 객체의 값을 변경할 수 있다는 장점이 있다.
1. Environment 객체를 이용
(1) Context 객체를 얻는다.
ConfigurableApplicationContext ctx = new GenericXmlApplicationContext();
(2) Context 객체로부터 ctx.getEnvironment()를 하여 Environment 객체를 얻는다. 
ConfigurableEnvironment env = ctx.getEnvironment();
(3) Environment객체안에는 여러 가지 정보들(환경설정을 위한)이 있다. 이런 값들을 관리하기 위해 이런 정보들이 바로 들어있지 않고, PropertySource라고 하는 객체가 있고, PropertySource안에 정보가 있다.  Environment 객체로부터 env.getPropertySources()를 하여 데이터를 관리해 주는 PropertySources 객체를 얻는다.
MutablePropertySources propertySources = env.getPropertySources();
(4) 추가 : propertySources.addLast()
propertySources.addLast(new ResourcePropertySource("classpath:admin.properties"));
// 외부 설정파일을 ResourcePropertySource로 만들고 그것을 propertySources에 추가한다
// 내가 만든 설정 환경설정이 따라 붙게 추가한 것
(5) 추출 : env.getProperty() 내가 필요한 정보가 있을 때까지 계속 검색하고 있으면 정보값을 리턴.
2. 프로퍼티 파일을 직접 이용한 설정 ; Environment 객체를 사용하지 않고 프로퍼티 파일을 직접 이용하여 스프링 빈을 설정하는 방법 - 스프링 설정 XML 파일에 프로퍼티 파일을 명시하는 방법
applicationCTX.xml 안에 admin.properties와 sub_admin.properties
3. 프로파일(profile) 속성을 이용한 설정 ; 동일한 스프링 빈을 여러 개 만들어 놓고 상황(환경)에 따라서 적절한 스프링 빈을 사용할 수 있게 합니다. profile 속성을 사용하면 됩니다.
; Xml 설정 파일을 이용하는 경우
스프링 컨테이너에서 어떤 설정 파일을 사용할지 결정 함 setActiveProfiles(config)
XML설정파일1 profile = “dev” or XML설정파일2 profile = “run”