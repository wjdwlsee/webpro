인터페이스란 실제 구현된 것이 전혀 없는 기본 설계도이며 작업명세서(작업지시서) 이다.
객체를 생성할 수 없고, 추상 메서드와 상수 만을 멤버로 가질 수 있다
다양성이란 여려 가지 형태를 가질 수 있는 능력으로 하나의 인터페이스를 사용하여 다양한 구현 방법을 제공하거나 하나의 클래스나 함수가 다양하게 동작한다.
오버라이딩의 조건은 선언부가 같아야 하며 접근제어자를 좁은 범위로 변경할 수 없다. 
java에서 다중상속은 불가하지만 interface를 통해서는 다중구현이 가능하여, 여러 가지 타입으로 객체를 선언할 수 있다. 
인터페이스를 구현하는 것은 클래스를 상속받는 것과 비슷하지만 'extends' 대신 ‘implements’를 사용한다.
장점으로는 개발시간을 단축시킬 수 있으며 인터페이스를 구현하는 클래스가 작성될 때까지 기다리지 않고도 양쪽에서 동시에 개발을 진행할 수 있다.
프로젝트에 사용되는 기본 틀을 인터페이스로 작성한 다음, 개발자들에게 인터페이스를 구현하여 프로그램을 작성하도록 함으로써 보다 일관되고 정형화된 프로그램의 개발이 가능하기 때문에 표준화가 가능하다.
 서로 상속 관계에 있지도 않고, 같은 조상클래스를 가지고 있지 않은 서로 아무런 관계도 없는 클래스들에게 하나의 인터페이스를 공통적으로 구현하도록 함으로써 관계를 맺어 줄 수 있다
또,클래스의 선언과 구현을 분리시킬 수 있기 때문에 실제 구현에 독립적인 프로그램을 작성하는 것이 가능하다. 
클래스와 클래스간의 직접적인 관계를 인터페이스를 이용해서 간접적인 관계로 변경하면, 한 클래스의 변경이 관련된 다른 클래스에 영향을 미치지 않는 독립적인 프로그래밍이 가능하다.
인터페이스와 추상클래스의 '공통점'은 추상메소드를 가지고 있어 하위 클래스에서 구현해야 하며 객체생성이 불가하지만 anonymose(익명클래스)는 이용할 수 있고 객체 생성이 목적이 아닌 변수 타입을 정의하는 것이 목적이다.
 '차이점'은 추상메소드는 상속(extends)을 통한 사용이고, 인터페이스는 구현(implements)을 통한 사용이다.
 추상클래스는 일반 클래스와 동일하게 변수, 메소드의 모든 기능을 사용할 수 있지만, 인터페이스는 상수와 추상메소드만이 존재 하고 추상클래스는 상속이므로 단일 상속만 지원하고, 인터페이스는 다중구현이 가능 합니다.
